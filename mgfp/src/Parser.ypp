/* $Id$ */

/*
 * C/C++ Declarations
 */
%{

#include "Nodes.h"

#include <cstdio>
#include <string>
#include <vector>

using namespace mgf;
using namespace mgf::detail;

%}

/*
 * yacc/bison Declarations 
 */

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start start

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="mgf"

/* set the parser's class identifier */
%define "parser_class_name" "Parser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Driver& driver }

/* verbose error messages */
%error-verbose

%union {
    int integerVal;
    double doubleVal;
    std::string* stringVal;
    DoublePairNode* doublepairnode;
    DoublePairListNode* doublepairlistnode;
    IntegerNode* integernode;
    IntegerListNode* integerlistnode;
}

%token END 0 "end of file"
%token EOL "end of line"
%token COMMENT "comment"
%token AND "and keyword"
%token <integerVal> INTEGER "integer"
%token <doubleVal> DOUBLE "double"
%token <stringVal> STRING "string"
%token BEGIN_IONS "begin_ions keyword"
%token CHARGE "charge set keyword"
%token COMP "amino acid composition keyword"
%token END_IONS	"end_ions keyword"
%token ETAG "error tolerant sequence keyword"
%token INSTRUMENT "MS/MS ion series keyword"
%token IT_MODS "variable modifications keyword"
%token PEPMASS "precursor mass keyword"
%token RTINSECONDS "retention time or range keyword"
%token SCANS "scan number of range keyword"
%token SEQ "amino acid sequence keyword"
%token TAG "sequence tag keyword"
%token TITLE "title keyword"
%token TOL "peptide mass tolerance keyword"
%token TOLU "tolerance units keyword"
%token CLE "enzyme keyword"
%token COM  "search title keyword"
%token DB "database keyword"
%token FORMAT "MS/MS datafile format keyword"
%token ITOLU "units for ITOL keyword"
%token MASS "mass type (mono or avg) keyword"
%token MODS "fixed modifications keyword"
%token QUANTITATION "quantitation method keyword"
%token REPORT "maximum hits keyword"
%token REPTYPE "type of report keyword"
%token SEARCH "type of search keyword"
%token TAXONOMY "taxonomy keyword"
%token USER "user keyword"
%token USEREMAIL "user email keyword"
%token USERNAME "username keyword"
%token DECOY "perform decoy search keyword"
%token ERRORTOLERANT "error tolerance keyword"
%token ITOL "fragment ion tolerance keyword"
%token PEP_ISOTOPE_ERROR "misassigned 13C keyword"
%token PFA "partials keyword"
%token PRECURSOR "precursor m/z keyword"
%token SEG "protein mass (kDa) keyword"
%token FRAMES "NA translation keyword"

%type <doublepairnode>	ion
%type <doublepairlistnode>	ions
%type <integernode> charge
%type <integerlistnode> charges
%type <integerlistnode> csintegerlist

%destructor { delete $$; } STRING 
%destructor { delete $$; } ion ions charge charges csintegerlist 

%{
#include <mgfp/Driver.h>
#include "Scanner.h"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex
%}

%% /*** Grammar Rules ***/

ion : DOUBLE DOUBLE EOL { $$ = new DoublePairNode($1, $2); }
    | INTEGER DOUBLE EOL { $$ = new DoublePairNode($1, $2); }
    | DOUBLE INTEGER EOL { $$ = new DoublePairNode($1, $2); }
    | INTEGER INTEGER EOL { $$ = new DoublePairNode($1, $2); }

ions : ions ion { $$ = new DoublePairListNode($1, $2); }
     | ion { $$ = new DoublePairListNode($1); }

charge: INTEGER '+' { $$ = new IntegerNode($1); }
        | INTEGER '-' { $$ = new IntegerNode(-$1); }

charges : '(' charges ')' { $$ = $2; }
        | charges ',' charge { $$ = new IntegerListNode($1, $3); }
        | charges AND  charge { $$ = new IntegerListNode($1, $3); }
        | charge { $$ = new IntegerListNode($1); }

csintegerlist: csintegerlist ',' INTEGER { $$ = new IntegerListNode($1, $3); }
           | INTEGER { $$ = new IntegerListNode($1); }

blocks : /* empty */
       | blocks block 
        {
            driver.context.mgfFile.push_back(driver.context.currentSpectrum);
            driver.context.currentSpectrum.clear();
        }

block : BEGIN_IONS EOL localparams ions END_IONS EOL 
        {
            driver.context.currentSpectrum.assign(($4->pairlist_)->begin(), ($4->pairlist_)->end());
            delete $4; 
        }

globalparams : /*empty*/ 
             | globalparams globalparam 

globalparam : CLE '=' STRING EOL { driver.context.header.setCLE(*$3); delete $3; }
            | COM  '=' STRING EOL { driver.context.header.setCOM(*$3); delete $3; }
            | DB  '=' STRING EOL { driver.context.header.setDB(*$3); delete $3; }
            | FORMAT  '=' STRING EOL { driver.context.header.setFORMAT(*$3); delete $3; }
            | INSTRUMENT  '=' STRING EOL { driver.context.header.setINSTRUMENT(*$3); delete $3; }
            | IT_MODS  '=' STRING EOL { driver.context.header.setIT_MODS(*$3); delete $3; }
            | ITOLU  '=' STRING EOL { driver.context.header.setITOLU(*$3); delete $3; }
            | MASS  '=' STRING EOL { driver.context.header.setMASS(*$3); delete $3; }
            | MODS  '=' STRING EOL { driver.context.header.setMODS(*$3); delete $3; }
            | QUANTITATION '=' STRING EOL { driver.context.header.setQUANTITATION(*$3); delete $3; }
            | REPORT '=' STRING EOL { driver.context.header.setREPORT(*$3); delete $3; }
            | REPTYPE '=' STRING EOL { driver.context.header.setREPTYPE(*$3); delete $3; }
            | SEARCH '=' STRING EOL { driver.context.header.setSEARCH(*$3); delete $3; }
            | TAXONOMY '=' STRING EOL { driver.context.header.setTAXONOMY(*$3); delete $3; }
            | TOLU '=' STRING EOL { driver.context.header.setTOLU(*$3); delete $3; }
            | USER '=' STRING EOL { /*driver.context.header.setUSER(*$3);*/ delete $3; } //FIXME
            | USEREMAIL '=' STRING EOL { driver.context.header.setUSEREMAIL(*$3); delete $3; }
            | USERNAME '=' STRING EOL { driver.context.header.setUSERNAME(*$3); delete $3; }
            | DECOY '=' INTEGER EOL { driver.context.header.setDECOY(($3)!=0); }
            | ERRORTOLERANT '=' INTEGER EOL { driver.context.header.setERRORTOLERANT(($3)!=0); }
            | PFA '=' INTEGER EOL { driver.context.header.setPFA($3); }
            | ITOL '=' DOUBLE EOL { driver.context.header.setITOL($3); }
            | ITOL '=' INTEGER EOL { driver.context.header.setITOL($3); }
            | PEP_ISOTOPE_ERROR '=' DOUBLE EOL { driver.context.header.setPEP_ISOTOPE_ERROR($3); }
            | PRECURSOR '=' DOUBLE EOL { driver.context.header.setPRECURSOR($3); }
            | SEG '=' DOUBLE EOL { driver.context.header.setSEG($3); }
            | TOL '=' DOUBLE EOL { driver.context.header.setTOL($3); }
            | TOL '=' INTEGER EOL { driver.context.header.setTOL($3); }
            | CHARGE '=' charges EOL { driver.context.header.setCHARGE(*($3->integers_)); delete $3; }
            | FRAMES '=' csintegerlist EOL { driver.context.header.setFRAMES(*($3->integers_)); delete $3; } 
            | COMMENT EOL

localparams : /* empty */ 
            | localparams localparam

localparam : TITLE '=' STRING EOL { driver.context.currentSpectrum.setTITLE(*$3); delete $3; }
           | COMP '=' STRING EOL { driver.context.currentSpectrum.setCOMP(*$3); delete $3; }
           | INSTRUMENT '=' STRING EOL { driver.context.currentSpectrum.setINSTRUMENT(*$3); delete $3; }
           | IT_MODS '=' STRING EOL { driver.context.currentSpectrum.setIT_MODS(*$3); delete $3; }
           | RTINSECONDS '=' DOUBLE EOL { driver.context.currentSpectrum.setRTINSECONDS($3); }
           | SCANS '=' STRING EOL { driver.context.currentSpectrum.setSCANS(*$3); delete $3; }
           | TOLU '=' STRING EOL { driver.context.currentSpectrum.setTOLU(*$3); delete $3; }
           | SEQ '=' STRING EOL { driver.context.currentSpectrum.setSEQ(*$3); delete $3; }/* FIXME: multiple */
           | TAG '=' STRING EOL { driver.context.currentSpectrum.setTAG(*$3); delete $3; }/* FIXME: multiple */
           | ETAG '=' STRING EOL { driver.context.currentSpectrum.setETAG(*$3); delete $3; }/* FIXME: multiple */
           | TOL '=' DOUBLE EOL { driver.context.currentSpectrum.setTOL($3); }
           | TOL '=' INTEGER EOL { driver.context.currentSpectrum.setTOL($3); }
           | CHARGE '=' charges EOL { driver.context.currentSpectrum.setCHARGE(*($3->integers_)); delete $3; }
           | PEPMASS '=' DOUBLE EOL { driver.context.currentSpectrum.setPEPMASS(std::make_pair($3, 0.0)); }
           | PEPMASS '=' DOUBLE DOUBLE EOL { driver.context.currentSpectrum.setPEPMASS(std::make_pair($3, $4)); }
           | PEPMASS '=' INTEGER EOL { driver.context.currentSpectrum.setPEPMASS(std::make_pair($3, 0.0)); }
           | PEPMASS '=' INTEGER INTEGER EOL { driver.context.currentSpectrum.setPEPMASS(std::make_pair($3, $4)); }
           | COMMENT EOL


contents : globalparams blocks END
         {
             driver.context.mgfFile.setHeader(driver.context.header);
             driver.context.header.clear();
         }

start : contents

%% /*** Additional Code ***/

void mgf::Parser::error(const Parser::location_type& l, const std::string& m)
{
    driver.error(l, m);
}
